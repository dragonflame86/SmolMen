entity_type_tag smolmen:water_mounts {
    "replace" : false,
    "values" : [
        "minecraft:salmon",
        "minecraft:cod"
    ]
}
entity_type_tag smolmen:air_mounts {
    "replace" : false,
    "values" : [
    ]
}

predicate ~/armadillo {
    "condition": "minecraft:entity_properties",
    "entity": "this",
    "predicate": {
        "vehicle": {
            "type": "minecraft:armadillo"
        }
    }
}

append function ./tick:
    effect give @a[predicate=smolmen:mount/armadillo] resistance 1 0 true
append function ./load:
    ## Ground mounts
    scoreboard players set smolmen.water_speed smolmen.dummy 1
    scoreboard players set smolmen.land_speed smolmen.dummy 2

    ## Air and water controls
    scoreboard players set smolmen.water_ascension smolmen.dummy 2
    scoreboard players set smolmen.air_ascension smolmen.dummy 2

    scoreboard players set smolmen.salmon_speed smolmen.dummy 2

    scoreboard players set smolmen.speed_multiplier smolmen.dummy 18



function ./mounts/water_control:

    scoreboard players operation smolmen.speed_multiplier smolmen.dummy = smolmen.salmon_speed smolmen.dummy
    on passengers store result score smolmen.motionY smolmen.dummy data get entity @s Rotation[1] -1

    unless score smolmen.motionY smolmen.dummy matches -20..20:
        ## Normalize motion Y size for motion calculations
        if score smolmen.motionY smolmen.dummy matches ..-1 run scoreboard players add smolmen.motionY smolmen.dummy 20
        if score smolmen.motionY smolmen.dummy matches 1.. run scoreboard players remove smolmen.motionY smolmen.dummy 20

        unless score smolmen.motionY smolmen.dummy matches 0 store result entity @s Motion[1] double 0.01 run scoreboard players get smolmen.motionY smolmen.dummy

    function smolmen:mounts/mount_standard_tick

function ./mounts/air_control:
    say bye


function ./mounts/mount_tick:
    ## Ticks mount movement code
    if entity @s[type=#smolmen:water_mounts] if predicate smolmen:in_water run function smolmen:mounts/water_control
    if entity @s[type=#smolmen:air_mounts] function smolmen:mounts/air_control

    unless entity @s[type=#smolmen:air_mounts] unless entity @s[type=#smolmen:water_mounts]:
        if predicate smolmen:in_water scoreboard players operation smolmen.speed_multiplier smolmen.dummy = smolmen.water_speed smolmen.dummy
        function smolmen:mounts/mount_standard_tick
        

function ./mounts/mount_standard_tick:
    ## Ticks mount movement code

    data modify entity @s Rotation set from entity @p Rotation

    store result score smolmen.motionX smolmen.dummy on passengers data get entity @s Motion[0] 1000
    store result score smolmen.motionZ smolmen.dummy on passengers data get entity @s Motion[2] 1000

    scoreboard players operation smolmen.motionX smolmen.dummy *= smolmen.speed_multiplier smolmen.dummy
    scoreboard players operation smolmen.motionZ smolmen.dummy *= smolmen.speed_multiplier smolmen.dummy

    execute store result entity @s Motion[0] double 0.01 run scoreboard players get smolmen.motionX smolmen.dummy
    execute store result entity @s Motion[2] double 0.01 run scoreboard players get smolmen.motionZ smolmen.dummy

    scoreboard players operation smolmen.speed_multiplier smolmen.dummy = smolmen.land_speed smolmen.dummy

def register_mountable(type, food):
    advancement f"smolmen:technical/feed/{type}" {
        "criteria": {
            "requirement": {
                "trigger": "minecraft:player_interacted_with_entity",
                "conditions": {
                    "player": [
                        {
                            "condition": "minecraft:entity_properties",
                            "entity": "this",
                            "predicate": {
                                "flags": {
                                    "is_sneaking": false
                                }
                            }
                        }
                    ],
                    "item": {
                        "items": food
                    },
                    "entity": [
                        {
                            "condition": "minecraft:entity_properties",
                            "entity": "this",
                            "predicate": {
                                "type": f"minecraft:{type}"
                            }
                        }
                    ]
                }
            }
        },
        "rewards": {
           "function": f"smolmen:mounts/{type}/mount_up"
        }
    }

    append function f"smolmen:mounts/{type}/mount_up":
        ride @s mount @e[type=type,nbt=!{InLove:0},sort=nearest,limit=1,distance=..3, tag=!smolmen.vehicle]
        execute as @e[type=type,nbt=!{InLove:0},sort=nearest,limit=1,distance=..3, tag=!smolmen.vehicle] at @s run function smolmen:mounts/prepare_mount

        advancement revoke @s only f"smolmen:technical/feed/{type}"


## register mountable animals
register_mountable("chicken", [
    "minecraft:wheat_seeds",
    "minecraft:torchflower_seeds",
    "minecraft:pumpkin_seeds",
    "minecraft:melon_seeds",
    "minecraft:beetroot_seeds"
])

register_mountable("armadillo","minecraft:spider_eye")
